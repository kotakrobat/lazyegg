JS Recon Pentest Guide:

1. **Sensitive Data**
   - Look for hard-coded credentials, API keys, tokens, and secrets.

2. **Hidden Hostnames/IPs/URLs**
   - Identify hidden endpoints, IP addresses, or URLs for backend connections.

3. **API Endpoints**
   - Find and test API endpoints for vulnerabilities.

4. **Comments**
   - Check for developer comments that may leak sensitive information or logic.

5. **Error Messages**
   - Analyze error handling and messages for information leakage.

6. **Function Names and Parameters**
   - Review for any suspicious or unusual function calls and parameters.

7. **Obfuscation**
   - Look for obfuscated code that might hide malicious activity.

**LocalStorage & Cookies**
- Ensure no sensitive information is stored in localStorage or cookies (e.g., passwords, tokens).
- Verify cookies have HttpOnly, Secure, and SameSite attributes set appropriately.
- Check the expiry date of cookies and the scope (domain/path) to minimize the attack surface.
- Assess for potential XSS vulnerabilities through stored values.
- Ensure that data stored is encrypted to prevent easy access if compromised.

**GraphQL**
- Ensure introspection is disabled in production to prevent schema leakage.
- Test for proper validation and sanitation of user inputs to avoid injection attacks.
- Verify proper authorization checks to prevent unauthorized data access.
- Implement and test for limits on query depth and complexity to avoid DoS attacks.
- Review error messages for information disclosure.

**MongoDB**
- Test for injection vulnerabilities where unvalidated user input can manipulate database queries.
- Ensure sensitive data is not stored in plaintext within the database.
- Check for insecure database configurations, such as open network access or weak authentication.
- Verify appropriate access controls to prevent unauthorized data access.

**JSON**
- Look for any sensitive information stored or transmitted in JSON format.
- Ensure JSON data is properly validated to prevent injection and other attacks.
- Verify JSON parsing libraries handle malformed or malicious JSON correctly to prevent crashes or exploits.
- Test APIs that consume or produce JSON for potential vulnerabilities, such as injection attacks or data leakage.

**Dangerous Functions**
- Look for usage of `eval()` as it can execute arbitrary code if input is not sanitized.
- Identify use of `innerHTML` and ensure input is properly sanitized to prevent XSS.
- Inspect for `document.write()` as it can create XSS vulnerabilities.
- Check for dynamic code execution with `setTimeout()`/`setInterval()` that can lead to injection vulnerabilities.
- Similar to `eval()`, the `Function()` constructor can execute arbitrary code.

**Additional Aspects**
- Review third-party libraries for known vulnerabilities and ensure they are up-to-date.
- Ensure a strong CSP is in place to mitigate XSS attacks.
- Check CORS policies to prevent unauthorized cross-origin access.
- Verify that HTTPS is enforced to secure data in transit.
- Ensure error logs do not expose sensitive information and are properly secured.

**Wordlist/Path Enumeration for Hidden JS Files**
- Use the LazyEgg tool for JS file enumeration and data extraction.
- Example Command:
  `python lazyegg.py <target_url> --js_scan -w wordlist.txt`
- Common Wordlist Entries:
  - admin.js
  - config.js
  - secrets.js
  - debug.js
  - api.js

- Tool Link: [LazyEgg](https://lazyegg.gudetama.cf)

